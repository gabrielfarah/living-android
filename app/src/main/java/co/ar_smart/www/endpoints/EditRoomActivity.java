package co.ar_smart.www.endpoints;

import android.app.Activity;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import co.ar_smart.www.helpers.Constants;
import co.ar_smart.www.helpers.RetrofitServiceGenerator;
import co.ar_smart.www.living.R;
import co.ar_smart.www.pojos.Room;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.POST;
import retrofit2.http.Path;

import static co.ar_smart.www.helpers.Constants.ACTION_ADD;
import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE;
import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE_PREF_HUB;
import static co.ar_smart.www.helpers.Constants.EXTRA_ROOM;

public class EditRoomActivity extends AppCompatActivity {

    /**
     * Rooms list
     */
    private ArrayList<String> rooms;
    /**
     * Checkbox state Map
     */
    private HashMap<Integer,CheckBox> checks;
    /**
     * Last selected checkbox
     */
    private CheckBox last;
    /**
     * List view Adapter
     */
    private ArrayAdapter<Room> adapter;

    /**
     * Room selected
     */
    private String room;
    private RoomClient client;
    private int PREFERRED_HUB_ID = -1;
    private ArrayList<Room> rooms_list = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_edit_room);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeButtonEnabled(true);
            getSupportActionBar().setTitle(getString(R.string.editroom_btntext));
        }
        Intent intent = getIntent();
        /*
      Token generated by JWT
     */
        String API_TOKEN = intent.getStringExtra(EXTRA_MESSAGE);
        client = RetrofitServiceGenerator.createService(RoomClient.class, API_TOKEN);
        PREFERRED_HUB_ID = intent.getIntExtra(EXTRA_MESSAGE_PREF_HUB, -1);
        boolean edit_action_flag = intent.getBooleanExtra(ACTION_ADD, false);

        room = intent.getStringExtra(EXTRA_ROOM);
        checks=new HashMap<>();

        /*
      List view where the rooms will be shown
     */
        ListView list = (ListView) findViewById(R.id.listRooms);
        /*
      Add room button
     */
        Button btnaddnew = (Button) findViewById(R.id.btnAddRoom);
        Button btRemove = (Button) findViewById(R.id.btnRemoveRoom);
        Button btnPick = (Button) findViewById(R.id.btnPickRoom);
        TextView textMessage = (TextView) findViewById(R.id.rooms_explanation_text_view);
        if (!edit_action_flag) {
            btnPick.setVisibility(View.VISIBLE);
            btnPick.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    finish();
                }
            });
        } else {
            btnPick.setVisibility(View.GONE);
        }
        if (room != null) {
            textMessage.setText(R.string.text_room_explanation_edit);
        } else {
            textMessage.setText(R.string.text_room_explanation_add_device);
        }

        btnaddnew.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDialog();
            }
        });
        btRemove.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showRemoveDialog();
            }
        });

        adapter = new ArrayAdapter<Room>(EditRoomActivity.this, android.R.layout.simple_list_item_1, rooms_list) {
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                ViewHolder mViewHolder;
                View vi = convertView;
                if (convertView == null) {
                    vi = getLayoutInflater().inflate(R.layout.row_add_room, null);
                    mViewHolder = new ViewHolder();
                    mViewHolder.room_name = (TextView) vi.findViewById(R.id.labelRoom);
                    mViewHolder.room_checkbox = (CheckBox) vi.findViewById(R.id.chkRoom);
                    vi.setTag(mViewHolder);
                } else {
                    mViewHolder = (ViewHolder) vi.getTag();
                }
                mViewHolder.room_name.setText(rooms_list.get(position).getDescription());
                if (room != null) {
                    if (room.equals(rooms_list.get(position).getDescription())) {
                        mViewHolder.room_checkbox.setChecked(true);
                        last = mViewHolder.room_checkbox;
                    }
                }
                checks.put(position, mViewHolder.room_checkbox);
                return vi;

            }
        };
        list.setAdapter(adapter);
        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (last != null) {
                    last.setChecked(false);
                }
                last=checks.get(position);
                last.setChecked(true);
                Intent returnIntent = new Intent();
                returnIntent.putExtra("result", rooms_list.get(position).getDescription());
                setResult(Activity.RESULT_OK,returnIntent);
            }
        });
        rooms_list = getRooms();
        adapter.notifyDataSetChanged();
    }

    private void showRemoveDialog() {
        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                switch (which) {
                    case DialogInterface.BUTTON_POSITIVE:
                        //Do your Yes progress
                        for (int i = 0; i < rooms_list.size(); i++) {
                            CheckBox a = checks.get(i);
                            if (a.isChecked()) {
                                Log.d("CHECKED", rooms_list.get(i).toString());
                                deleteRoom(rooms_list.get(i));
                            }
                        }
                        break;

                    case DialogInterface.BUTTON_NEGATIVE:
                        //Do your No progress
                        break;
                }
            }
        };
        AlertDialog.Builder ab = new AlertDialog.Builder(this);
        ab.setMessage(R.string.label_confirmation_remove_room).setPositiveButton(R.string.yes, dialogClickListener)
                .setNegativeButton(R.string.cancel, dialogClickListener).show();
    }

    /***
     * This method get all rooms that are bounded to the preferred hub
     * @return Rooms list
     */
    public ArrayList<Room> getRooms() {
        Call<List<Room>> call2 = client.getrooms(PREFERRED_HUB_ID);
        call2.enqueue(new Callback<List<Room>>() {
            @Override
            public void onResponse(Call<List<Room>> call, Response<List<Room>> response) {
                if (response.isSuccessful()) {
                    rooms_list = (ArrayList<Room>) response.body();
                    if (rooms_list.isEmpty()) {
                        Toast.makeText(EditRoomActivity.this, R.string.not_matching_areas,
                                Toast.LENGTH_SHORT).show();
                    }
                    adapter.addAll(rooms_list);
                    adapter.notifyDataSetChanged();
                } else {
                    Toast.makeText(EditRoomActivity.this, R.string.error_requesting_areas,
                            Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Room>> call, Throwable t) {
                Toast.makeText(EditRoomActivity.this, R.string.error_requesting_areas,
                        Toast.LENGTH_SHORT).show();
            }
        });
        return rooms_list;
    }

    private void deleteRoom(final Room r) {
        if (rooms_list.contains(r)) {
            Log.d("LO TIENE", r.toString());
        }
        Call<ResponseBody> call = client.deleteRoom(PREFERRED_HUB_ID, r.getId());
        call.enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    rooms_list.remove(r);
                    adapter.remove(r);
                    adapter.notifyDataSetChanged();
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                showNoInternetMessage();
            }
        });
    }

    private void showNoInternetMessage() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Constants.showNoInternetMessage(getApplicationContext());
            }
        });
    }

    /**
     * Show dialog that allows add a new room given a name
     */
    public void showDialog()
    {
        final Dialog dialog = new Dialog(EditRoomActivity.this);
        dialog.setTitle(R.string.living_room_lights);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_add_room);
        final TextView txtname=(TextView) dialog.findViewById(R.id.txtNameNewRoom);
        Button dialogButton = (Button) dialog.findViewById(R.id.btnAddNewRoom);
        dialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!txtname.getText().equals(""))
                {
                    Room temp = new Room(PREFERRED_HUB_ID, String.valueOf(txtname.getText()));
                    if (!rooms_list.contains(temp)) {
                        addRoom(temp);
                        adapter.notifyDataSetChanged();
                    } else {
                        Toast.makeText(EditRoomActivity.this, R.string.room_name_used,
                                Toast.LENGTH_SHORT).show();
                    }
                }
                dialog.dismiss();
            }
        });

        dialogButton = (Button) dialog.findViewById(R.id.btnCancelNewRoom);
        dialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });

        dialog.show();
    }

    /**
     * Send a new room to the backend given a name
     * @param room room name
     */
    public void addRoom(final Room room)
    {
        Call<Room> call = client.addroom(PREFERRED_HUB_ID, room);

        call.enqueue(new Callback<Room>() {
            @Override
            public void onResponse(Call<Room> call, Response<Room> response) {
                if (response.isSuccessful()) {
                    Room temp = response.body();
                    rooms_list.add(temp);
                    adapter.add(temp);
                    adapter.notifyDataSetChanged();
                } else {
                    Toast.makeText(EditRoomActivity.this, R.string.error_adding_room,
                            Toast.LENGTH_SHORT).show();
                    try {
                        Log.d("ERROR Agregar AREA 1", response.errorBody().string());
                        Log.d("ERROR Agregar AREA 1", response.message());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<Room> call, Throwable t) {
                Toast.makeText(EditRoomActivity.this, R.string.error_adding_room,
                        Toast.LENGTH_SHORT).show();
                Log.d("ERROR Agregar AREA 2", t.getMessage());
                t.printStackTrace();
            }
        });

    }

    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                // app icon in action bar clicked; go home
                this.finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * This interface implements a Retrofit interface for the RoomClient
     */

    private interface RoomClient {
        @GET("hubs/{hub_id}/rooms/")
        Call<List<Room>> getrooms(@Path("hub_id") int hub_id);

        @POST("hubs/{hub_id}/rooms/")
        Call<Room> addroom(@Path("hub_id") int hub_id, @Body Room r);

        @DELETE("hubs/{hub_id}/rooms/{room_id}/")
        Call<ResponseBody> deleteRoom(@Path("hub_id") int hub_id, @Path("room_id") int room_id);
    }

    public class ViewHolder {

        public TextView room_name;
        public CheckBox room_checkbox;

    }
}
