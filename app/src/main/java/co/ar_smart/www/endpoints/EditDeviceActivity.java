package co.ar_smart.www.endpoints;

import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;

import co.ar_smart.www.adapters.GridDevicesAdapter;
import co.ar_smart.www.helpers.Constants;
import co.ar_smart.www.helpers.RetrofitServiceGenerator;
import co.ar_smart.www.living.R;
import co.ar_smart.www.pojos.Endpoint;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.PATCH;
import retrofit2.http.POST;
import retrofit2.http.Path;

import static co.ar_smart.www.helpers.Constants.ACTION_ADD;
import static co.ar_smart.www.helpers.Constants.ACTION_EDIT;
import static co.ar_smart.www.helpers.Constants.EXTRA_ACTION;
import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE;
import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE_PREF_HUB;
import static co.ar_smart.www.helpers.Constants.EXTRA_OBJECT;
import static co.ar_smart.www.helpers.Constants.EXTRA_ROOM;

public class EditDeviceActivity extends AppCompatActivity {

    /**
     * Icon device
     */
    private String icon;
    /**
     * Room device
     */
    private String room;
    /**
     * Token generated by JWT
     */
    private String API_TOKEN;
    /**
     * Name Device
     */
    private EditText txtName;
    /**
     * Current device
     */
    private Endpoint device;
    private int PREFERRED_HUB_ID;
    private TextView select_room;
    private TextView selected_room;
    private TextView select_icon;
    private ImageView selected_icon;
    private String activity_action;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_edit_device);
        Intent intent = getIntent();
        device = intent.getParcelableExtra(EXTRA_OBJECT);
        API_TOKEN = intent.getStringExtra(EXTRA_MESSAGE);
        PREFERRED_HUB_ID = intent.getIntExtra(EXTRA_MESSAGE_PREF_HUB, -1);
        Log.d("PREF", "-[][][][][] " + PREFERRED_HUB_ID + "");
        activity_action = intent.getStringExtra(EXTRA_ACTION);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeButtonEnabled(true);
            getSupportActionBar().setTitle(device.getName());
        }
        Button btnIcon=(Button) findViewById(R.id.btnEditIcon);
        Button btnRoom=(Button) findViewById(R.id.btnEditRoom);
        Button saveButton = (Button) findViewById(R.id.save_device_button);
        txtName=(EditText) findViewById(R.id.txtNameDev);

        room = "";
        icon = "";

        select_room = (TextView) findViewById(R.id.select_room_text_view);
        selected_room = (TextView) findViewById(R.id.selected_room_text_view);
        select_icon = (TextView) findViewById(R.id.select_icon_text_view);
        selected_icon = (ImageView) findViewById(R.id.selected_icon_image_view);

        if (activity_action.equals(ACTION_EDIT))
        {
            if (device.getRoom() != null && !device.getRoom().isEmpty()) {
                room = device.getRoom();
                selected_room.setText(room);
            }
            if (device.getImage() != null && !device.getImage().isEmpty()) {
                icon = device.getImage();
                selected_icon.setImageResource(GridDevicesAdapter.getDrawableFromString(icon));
            }
            txtName.setText(device.getName());
        }

        btnIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(EditDeviceActivity.this, EditIconActivity.class);
                intent.putExtra(EXTRA_ROOM, device.getRoom());
                startActivityForResult(intent, 1);
            }
        });
        btnRoom.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(EditDeviceActivity.this, EditRoomActivity.class);
                intent.putExtra(EXTRA_MESSAGE, API_TOKEN);
                intent.putExtra(EXTRA_ROOM, device.getRoom());
                intent.putExtra(EXTRA_MESSAGE_PREF_HUB, PREFERRED_HUB_ID);
                startActivityForResult(intent, 2);
            }
        });
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                validateActions();
            }
        });
    }

    private void validateActions() {
        if (checkFields()) {
            switch (activity_action) {
                case Constants.ACTION_EDIT:
                    editDevice();
                    break;
                case ACTION_ADD:
                    registerDevice();
                    break;
                default:
            }
        } else {
            Toast.makeText(EditDeviceActivity.this, getResources().getString(R.string.warning_fields), Toast.LENGTH_SHORT).show();
        }
    }

    /*@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.edit_devices_menu, menu);
        btnPost=menu.findItem(R.id.btnpostdevices);
        btnPost.setEnabled(true);
        return true;
    }*/

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.btnpostdevices:
                validateActions();
                return true;
            case android.R.id.home:
                // app icon in action bar clicked; go home
                validateActions();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    public void onBackPressed() {
        validateActions();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == 1) {
            if(resultCode == Activity.RESULT_OK){
                icon=data.getStringExtra("result");
                if (checkFields()) {
                }
                //btnPost.setIcon(ContextCompat.getDrawable(myact, R.drawable.new_cross_btn));
            }else if (resultCode == Activity.RESULT_CANCELED) {

            }
        }
        else if (requestCode == 2) {
            if(resultCode == Activity.RESULT_OK){
                room=data.getStringExtra("result");
                if (checkFields()) {
                    //btnPost.setIcon(ContextCompat.getDrawable(myact, R.drawable.new_cross_btn));
                }
            } else if (resultCode == Activity.RESULT_CANCELED) {

            }
        }
    }

    /**
     * This method check if the fields are empty.
     */
    private boolean checkFields()
    {
        if (room != null && !room.isEmpty()) {
            select_room.setVisibility(View.VISIBLE);
            selected_room.setVisibility(View.VISIBLE);
            selected_room.setText(room);
        }
        if (icon != null && !icon.isEmpty()) {
            select_icon.setVisibility(View.VISIBLE);
            selected_icon.setVisibility(View.VISIBLE);
            selected_icon.setImageResource(GridDevicesAdapter.getDrawableFromString(icon));
        }
        return !txtName.getText().toString().equals("") && !room.equals("") && !icon.equals("");
    }

    /**
     * This method send the the new device to the backend
     */
    public void registerDevice()
    {
        device.setAtributes(txtName.getText().toString(), icon, room);
        RegDeviceClient client = RetrofitServiceGenerator.createService(RegDeviceClient.class, API_TOKEN);
        Call<Endpoint> call = client.regDevice("" + PREFERRED_HUB_ID, device);
        call.enqueue(new Callback<Endpoint>()
        {
            @Override
            public void onResponse(Call<Endpoint> call, Response<Endpoint> response)
            {
                if (response.isSuccessful()) {
                    device = response.body();
                    //devices.add(response.body());
                    showDialog();
                }
                else{
                    Log.d("Fallo", call.request().toString());
                    try {
                        Log.d("Fallo", response.errorBody().string());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<Endpoint> call, Throwable t) {
                Toast.makeText(EditDeviceActivity.this, R.string.error_registering_device,
                        Toast.LENGTH_SHORT).show();
            }
        });
    }

    /**
     * This method sends the devices with the new fields to the backend
     */
    public void editDevice()
    {
        device.setAtributes(txtName.getText().toString(), icon, room);

        RegDeviceClient client = RetrofitServiceGenerator.createService(RegDeviceClient.class, API_TOKEN);
        Call<Endpoint> call = client.editDev("" + PREFERRED_HUB_ID, device.getId(), device);
        call.enqueue(new Callback<Endpoint>()
        {
            @Override
            public void onResponse(Call<Endpoint> call, Response<Endpoint> response)
            {
                if (response.isSuccessful()) {
                    showDialog();
                }
            }

            @Override
            public void onFailure(Call<Endpoint> call, Throwable t) {

            }
        });
    }

    /**
     * Show a notification message dialog when the device was sent to the backend
     */
    public void showDialog()
    {
        final Dialog dialog = new Dialog(EditDeviceActivity.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_device_added);

        TextView t=(TextView) dialog.findViewById(R.id.titleAddDevice) ;
        t.setText(device.getName());

        Button dialogButton = (Button) dialog.findViewById(R.id.btnDialogDevAdd);
        dialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
                // Finish this activity and return to parent
                Intent intent = new Intent();
                intent.putExtra(EXTRA_OBJECT, device);
                setResult(RESULT_OK, intent);
                finish();//finishing activity
            }
        });

        dialog.show();
    }

    /**
     * This interface implements a Retrofit interface for the EditDeviceActivity
     */
    private interface RegDeviceClient {
        @POST("hubs/{hub_id}/endpoints/")
        Call<Endpoint> regDevice(@Path("hub_id") String hub_id,@Body Endpoint en );

        @PATCH("hubs/{hub_id}/endpoints/{endp_id}/")
        Call<Endpoint> editDev(@Path("hub_id") String hub_id, @Path("endp_id") int endp_id, @Body Endpoint en);
    }
}
