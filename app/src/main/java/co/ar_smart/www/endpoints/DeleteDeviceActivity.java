package co.ar_smart.www.endpoints;

import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;

import co.ar_smart.www.analytics.AnalyticsApplication;
import co.ar_smart.www.helpers.Constants;
import co.ar_smart.www.helpers.RetrofitServiceGenerator;
import co.ar_smart.www.interfaces.IHomeClient;
import co.ar_smart.www.living.R;
import co.ar_smart.www.pojos.Endpoint;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.Path;

import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE;
import static co.ar_smart.www.helpers.Constants.EXTRA_MESSAGE_PREF_HUB;
import static co.ar_smart.www.helpers.Constants.EXTRA_OBJECT;

public class DeleteDeviceActivity extends AppCompatActivity {

    /**
     * Token generated by JWT
     */
    private String API_TOKEN = "";
    /**
     * Endpoints list
     */
    private ArrayList<Endpoint> devices = new ArrayList<>();
    /**
     * Represent the list view where the devices will be shown
     */
    private ListView list;
    /**
     * Represent the progress circle shown while the devices are been downloaded
     */
    private ProgressBar progress;
    /**
     * Adapter for the list view
     */
    private ArrayAdapter<Endpoint> adapter;
    /**
     * Represent the current instance
     */
    private Activity myact;
    private int PREFERRED_HUB_ID;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_delete_device);
        myact=this;

        list = (ListView) findViewById(R.id.list_DelDevicesHub);
        progress = (ProgressBar) findViewById(R.id.progressDelDevices);
        TextView description = (TextView) findViewById(R.id.add_device_text_view_message);
        description.setText(getResources().getString(R.string.description_delete_wifi));

        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeButtonEnabled(true);
            getSupportActionBar().setTitle(getString(R.string.label_deletedev_activity_title));
        }

        Intent intent = getIntent();
        API_TOKEN = intent.getStringExtra(EXTRA_MESSAGE);
        PREFERRED_HUB_ID = intent.getIntExtra(EXTRA_MESSAGE_PREF_HUB, -1);
        devices = getIntent().getParcelableArrayListExtra(EXTRA_OBJECT);
        if (!devices.isEmpty()) {
            for (int i = 0; i < devices.size(); i++) {
                if (!devices.get(i).getEndpoint_type().equalsIgnoreCase("wifi")) {
                    devices.remove(i);
                }
            }
        } else {
            getDevices();
        }
        Log.d("DEVICES", devices.toString());
        adapter=new ArrayAdapter<Endpoint>(DeleteDeviceActivity.this, android.R.layout.simple_list_item_1, devices){
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                View view=convertView;
                if(view==null)
                {

                    view=getLayoutInflater().inflate(R.layout.row_list_devices,null);
                    TextView lb=(TextView)view.findViewById(R.id.labelDevadd);
                    lb.setText(devices.get(position).getName());
                    //lb=(TextView)view.findViewById(R.id.labelDevCategoryadd);
                    //lb.setText(devices.get(position).getCategory().getCat());
                    ImageView i=(ImageView) view.findViewById(R.id.iconlistad);
                    i.setImageDrawable(ContextCompat.getDrawable(myact, R.drawable.delete_icon));
                }
                //chk.setChecked(checked[position]);
                return view;
            }
        };

        list.setAdapter(adapter);
        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                showDialog(devices.get(position));
            }
        });

        progress.setVisibility(View.GONE);
        list.setVisibility(View.VISIBLE);
        //getDevices();



    }

    private void getDevices() {
        IHomeClient livingIHomeClient = RetrofitServiceGenerator.createService(IHomeClient.class, API_TOKEN);
        Call<ArrayList<Endpoint>> call = livingIHomeClient.endpoints("" + PREFERRED_HUB_ID);
        //Log.d("OkHttp", String.format("Sending request %s ",call.request().toString()));
        call.enqueue(new Callback<ArrayList<Endpoint>>() {
            @Override
            public void onResponse(Call<ArrayList<Endpoint>> call, Response<ArrayList<Endpoint>> response) {
                if (response.isSuccessful()) {
                    devices = response.body();
                    updateUIWithResponse();
                }
            }

            @Override
            public void onFailure(Call<ArrayList<Endpoint>> call, Throwable t) {
                // something went completely south (like no internet connection)
                Constants.showNoInternetMessage(getApplicationContext());
                t.printStackTrace();
                AnalyticsApplication.getInstance().trackException(new Exception(t));
            }
        });

    }

    private void updateUIWithResponse() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                progress.setVisibility(View.GONE);
                list.setVisibility(View.VISIBLE);
                list.setAdapter(adapter);
                adapter.notifyDataSetChanged();
                list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        showDialog(devices.get(position));
                    }
                });
            }
        });
    }

    public void showDialog(final Endpoint endpoint) {
        final Dialog dialog = new Dialog(DeleteDeviceActivity.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_warning_delete);
        TextView txtname=(TextView) dialog.findViewById(R.id.lbl_warning_del_device);
        txtname.setText(getResources().getString(R.string.label_warning_delete_device) + " " + endpoint.getName() + "?");
        Button dialogButton = (Button) dialog.findViewById(R.id.btnDel);
        dialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                deleteEndPoint(endpoint);
                dialog.dismiss();
            }
        });
        dialogButton = (Button) dialog.findViewById(R.id.btnCancelDel);
        dialogButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.show();
    }

    private void deleteEndPoint(final Endpoint endpoint) {
        DevicesHubClient client = RetrofitServiceGenerator.createService(DevicesHubClient.class, API_TOKEN);
        Call<Endpoint> call2 = client.delendpoint("" + PREFERRED_HUB_ID, "" + endpoint.getId());

        call2.enqueue(new Callback<Endpoint>()
        {
            @Override
            public void onResponse(Call<Endpoint> call, Response<Endpoint> response)
            {
                if (response.isSuccessful()) {
                    devices.remove(endpoint);
                    adapter.notifyDataSetChanged();
                }
            }

            @Override
            public void onFailure(Call<Endpoint> call, Throwable t) {
                Toast.makeText(DeleteDeviceActivity.this, R.string.error_requesting_devices,
                        Toast.LENGTH_SHORT).show();
                progress.setVisibility(View.GONE);
                list.setVisibility(View.VISIBLE);
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                // app icon in action bar clicked; go home
                this.finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * This interface implements a Retrofit interface for the DeviceHubActivity
     */
    private interface DevicesHubClient {
        @GET("hubs/{hub_id}/endpoints/")
        Call<List<Endpoint>> getendpoints(@Path("hub_id") String hub_id);

        @DELETE("hubs/{hub_id}/endpoints/{endpoint_id}/")
        Call<Endpoint> delendpoint(@Path("hub_id") String hub_id, @Path("endpoint_id") String endpoint_id);
    }
}
